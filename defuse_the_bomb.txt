You have a bomb to defuse, and your time is running out! Your informer will provide you with a circular array code of length of n and a key k.

To decrypt the code, you must replace every number. All the numbers are replaced simultaneously.

If k > 0, replace the ith number with the sum of the next k numbers.
If k < 0, replace the ith number with the sum of the previous k numbers.
If k == 0, replace the ith number with 0.
As code is circular, the next element of code[n-1] is code[0], and the previous element of code[0] is code[n-1].

Given the circular array code and an integer key k, return the decrypted code to defuse the bomb!

-----------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int[] decrypt(int[] code, int k) {
        int[] vettore = new int[code.length];

        for (int i = 0; i < code.length; i++) {
            int n = i;
            if (k > 0) {
                for (int j = 0; j < k; j++) {
                    if (n == code.length - 1) n = -1;
                    vettore[i] += code[n + 1];
                    n++;
                }
            }
            if (k < 0) {
                for (int j = 0; j > k; j--) {
                    if (n == 0) n = code.length;
                    vettore[i] += code[n - 1];
                    n--;
                }
            }
            if (k == 0) vettore[i] = 0;
        }
    }
}
        return vettore;
    }
}